generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Type {
  VETEMENT
  CHAUSSURE
  ALIMENT
  MONTRE
}

enum Role {
  ADMIN
  CAISSE
  GESTIONNAIRE
  COMPTABLE
  LOGISTIQUE
}

enum Genre {
  MASCULIN
  FEMININ
}

enum Statut {
  DISPONIBILITE
  VENDU
  PROMO
}

// Action effectuée par un utilisateur
model Audit {
  id       String @id() @default(uuid()) @db.Uuid
  table    String
  table_id String
  message  String

  // Relation avec Utilisateur
  utilisateur    Utilisateur @relation(fields: [utilisateur_id], references: [id]) // relation
  utilisateur_id String      @db.Uuid

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("audits")
}

// Pour les vêtements, on a T-shirt, Pantalon, etc.
model Categorie {
  id          String  @id() @default(uuid()) @db.Uuid
  reference   String  @unique
  nom         String
  description String? @db.Text

  // Relation avec Type
  type Type @default(VETEMENT)

  // Relation avec Article
  articles Article[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("categories")
}

model Collection {
  id          String  @id() @default(uuid()) @db.Uuid
  reference   String  @unique
  nom         String
  description String? @db.Text

  // Relation avec Article
  articles Article[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("collections")
}

model Otp {
  id      String   @id() @default(uuid()) @db.Uuid
  code    String
  expire  DateTime
  email   String
  counter Int
}

model CounterOtp {
  id      String @id @default(uuid()) @db.Uuid
  counter Int    @default(0)
}

model Article {
  id             String    @id @default(uuid()) @db.Uuid
  reference      String    @unique
  nom            String
  description    String?   @db.Text
  infos          Json      @db.Json // pour un vêtement, on a la marque, matière, etc.
  status         Statut    @default(DISPONIBILITE)
  image          String?
  quantite       Int?
  prix           Float
  estEnPromotion Boolean
  prixPromotion  Float
  // Relation avec Categorie
  categorie      Categorie @relation(fields: [categorie_id], references: [id])
  categorie_id   String    @db.Uuid

  // Relation avec Collection
  collection    Collection? @relation(fields: [collection_id], references: [id])
  collection_id String?     @db.Uuid

  // Relation avec Varietes
  varietes Variete[]

  // Relation avec Note
  notes Note[]

  // Relation avec Favoris
  favoris Favoris[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("articles")
}

// Pour le même article, on peut avoir plusieurs variantes par exemple pour les vêtements on a la taille et la couleur
model Variete {
  id        String   @id() @default(uuid()) @db.Uuid
  reference String
  couleur   String
  tailles   Json     @db.Json // [{taille: "S", quantite: 10, prix: 100}, {taille: "M", quantite: 10, prix: 100}]
  image     String[]

  // Relation avec Article
  article    Article @relation(fields: [article_id], references: [id])
  article_id String  @db.Uuid

  @@map("varietes")
}

model Note {
  id          String  @id() @default(uuid())
  etoile      Decimal
  commentaire String
  reponse     String? @db.Uuid // Peut être null si ce n'est pas une réponse

  // Relation avec Client
  client    Client @relation(fields: [client_id], references: [id])
  client_id String @db.Uuid

  // Relation avec Article
  article    Article @relation(fields: [article_id], references: [id])
  article_id String  @db.Uuid

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("notes")
}

model Favoris {
  id String @id() @default(uuid())

  // Relation avec Client
  client    Client @relation(fields: [client_id], references: [id])
  client_id String @db.Uuid

  // Relation avec Article
  article    Article @relation(fields: [article_id], references: [id])
  article_id String  @db.Uuid

  @@unique([client_id, article_id])
  @@map("favoris")
}

model Utilisateur {
  id             String    @id() @default(uuid()) @db.Uuid
  nomComplet     String
  nomUtilisateur String    @unique
  email          String    @unique
  password       String
  role           Role      @default(ADMIN)
  date_naissance DateTime? @db.Date
  genre          Genre?
  avatar         String?
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  // Relation avec Audit
  audits Audit[]

  @@map("utilisateurs")
}

model Client {
  id             String    @id() @default(uuid()) @db.Uuid
  nom            String
  prenom         String
  nomUtilisateur String    @unique
  email          String    @unique
  phone          String
  password       String
  genre          Genre
  adresse        String
  date_naissance DateTime? @db.Date
  avatar         String?
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  // Relation avec Favoris
  favoris Favoris[]

  // Relation avec Note
  notes Note[]

  @@map("clients")
}
